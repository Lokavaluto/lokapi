# -*- ispell-local-dictionary: "english" -*-
#+SETUPFILE: ~/.emacs.d/etc/setup/default.setup
#+SETUPFILE: ~/.emacs.d/etc/setup/latex.setup
#+SETUPFILE: ~/.emacs.d/etc/setup/html-readtheorg-local.setup

#+TITLE: Lokavaluto's LokAPI
#+LATEX: \pagebreak

LokAPI is a javascript library intended to be used in mobile
applications or web application to abstract all logics with
lokavaluto's server.

#+LATEX: \pagebreak
#+LATEX: \pagebreak




* Adding =lokapi= to your project

From the root of your project:

#+begin_src sh
npm install --save lokapi
#+end_src

Or better, as =lokapi= is still in early release,

#+begin_src sh
npm install --save Lokavaluto/lokapi#master
#+end_src

To be sure to get the latest version, relaunch this last command
whenever you want to update.

* Setting up =lokapi=

** Subclassing main LokAPIAbstract

Lokapi will require a way to make HTTP request, access to a permanent
store, or various other tasks. Depending on your platform or
environment, you might have different way to implement these.

To inject these exchangeable dependency, you are invited to subclass
LokAPIAbstract and define these objects:

- httpRequest :: an implementation of =HTTPRequest=
- base64Encode :: a function to encode a string to base64

** Instanciating lokapi

On instantiation time, =LokAPI= class will require you to provide:

  - host :: as a =string= (example: "lokavaluto.fr")

  - database :: as a =string= (example: "myodoodb")


*** Example for node


Using node's core =https= as HTTP requestion implementation:


#+begin_src typescript

import https from "https"

import { LokAPIAbstract, e as LokAPIExc, t as LokAPIType } from "lokapi"

class NodeLokAPI extends LokApiAbstract {

    httpRequest = (opts: LokAPIType.coreHttpOpts) => {
        if (opts.protocol !== 'https') {
            throw new Error(`Protocol ${opts.protocol} unsupported by this implementation`)
        }
        const httpsOpts: LokAPIType.coreHttpOpts = {
            host: opts.host,
            path: opts.path,
            method: opts.method,
            headers: opts.headers,
        }
        return new Promise((resolve, reject) => {

            let req = https.request(httpsOpts, (res) => {
                const { statusCode } = res

                let rawData = ''

                res.on('data', (chunk) => { rawData += chunk })
                res.on('end', () => {
                    if (!statusCode || statusCode.toString().slice(0, 1) !== '2') {
                        res.resume();
                        reject(new LokAPIExc.HttpError(statusCode, res.statusMessage, "", res))
                        return
                    } else {
                        resolve(rawData)
                    }
                });
            })

            if (opts.data) req.write(JSON.stringify(opts.data))

            req.end();
            req.on('error', (err) => {
                console.error(`Encountered an error trying to make a request: ${err.message}`);
                reject(new LokAPIExc.RequestFailed(err.message))
            });
        })

    }

    base64Encode = (s: string) => Buffer.from(s).toString('base64')

}


if (!process.env.VUE_APP_LOKAPI_HOST) {
    throw new Error("Please specify VUE_APP_LOKAPI_HOST in '.env'")
}


if (!process.env.VUE_APP_LOKAPI_DB) {
    throw new Error("Please specify VUE_APP_LOKAPI_DB in '.env'")
}


var lokAPI = new LokAPI(
    process.env.VUE_APP_LOKAPI_HOST,
    process.env.VUE_APP_LOKAPI_DB,
)
#+end_src


*** Example for =nativescript=

Using =@nativescript-community/https= as HTTP request implementation:


#+begin_src typescript
  import * as https from '@nativescript-community/https';

  import { LokAPIAbstract, e as LokAPIExc, t as LokAPIType } from "lokapi"


  class NativeLokAPI extends LokAPIAbstract {

      httpRequest = async (opts: LokAPIType.coreHttpOpts) => {
          const nativeRequestOpts = {
              url: opts.protocol + "://" + opts.host + opts.path,
              method: opts.method,
              headers: opts.headers,
              body: opts.data,
              useLegacy: true,
          }
          let response
          try {
              response = await https.request(nativeRequestOpts)
          } catch (err) {
              console.error(
                  `Encountered an error trying to make a request: ${err.message}`);
              reject(new LokAPIExc.RequestFailed(err.message))
          }

          const statusCode = response.statusCode;
          let rawData = await response.content.toStringAsync();

          if (!statusCode || statusCode.toString().slice(0, 1) !== '2') {
              throw new LokAPIExc.HttpError(statusCode, response.reason, "", response)
          }

          return rawData
      }

      base64Encode = base64Encode
  }


  var lokAPI = new NativeLokAPI(APP_HOST, APP_DB)

#+end_src


* Usage

** Login

You must log in to the server with an existing Odoo Lokavaluto
account:

#+begin_src typescript
await lokApi.login("myuser", "mypassword")
#+end_src


** Accessing accounts

We assume that you've instanciated =LokAPI= as stated in the previous
section, and you have logged in.

#+begin_src typescript
let accounts = await lokApi.backends[0].accounts
console.log(`balance in first account: ${accounts[0].balance} ${accounts[0].symbol}`)
#+end_src

- =lokAPI.backends= is the list of backends connections that are
  managed by the current account. For now, don't expect more than one
  element inside.

- =backend.accounts= is the list of accounts in that connection
  (warning, this is a promise).

- =account.balance= is the balance of the account

- =account.symbol= is the currency symbol for the account


** Direct request to odoo api


You can use =lokapi= instance to query directly the odoo api trough
the =get=, =post=, =put=, =delete= methods and their authenticated
counterparts, =$get=, =$post=, =$put=, =$delete=.

#+begin_src typescript
lokAPI.$post(`/partner/${userId}`)
lokAPI.$post(`/partner/favorite`)
lokAPI.$post(`/partner/${userId}/toggle_favorite`)
#+end_src
